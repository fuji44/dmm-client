/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import {
  type AdditionalDataHolder,
  type BaseRequestBuilder,
  type Parsable,
  type ParsableFactory,
  type ParseNode,
  type RequestConfiguration,
  type RequestInformation,
  type RequestsMetadata,
  type SerializationWriter,
} from "@microsoft/kiota-abstractions";

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GenreSearchGetResponse_request_parameters}
 */
// @ts-ignore
export function createGenreSearchGetResponse_request_parametersFromDiscriminatorValue(
  parseNode: ParseNode | undefined,
): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
  return deserializeIntoGenreSearchGetResponse_request_parameters;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GenreSearchGetResponse_request}
 */
// @ts-ignore
export function createGenreSearchGetResponse_requestFromDiscriminatorValue(
  parseNode: ParseNode | undefined,
): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
  return deserializeIntoGenreSearchGetResponse_request;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GenreSearchGetResponse_result_genre}
 */
// @ts-ignore
export function createGenreSearchGetResponse_result_genreFromDiscriminatorValue(
  parseNode: ParseNode | undefined,
): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
  return deserializeIntoGenreSearchGetResponse_result_genre;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GenreSearchGetResponse_result}
 */
// @ts-ignore
export function createGenreSearchGetResponse_resultFromDiscriminatorValue(
  parseNode: ParseNode | undefined,
): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
  return deserializeIntoGenreSearchGetResponse_result;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GenreSearchGetResponse}
 */
// @ts-ignore
export function createGenreSearchGetResponseFromDiscriminatorValue(
  parseNode: ParseNode | undefined,
): (instance?: Parsable) => Record<string, (node: ParseNode) => void> {
  return deserializeIntoGenreSearchGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGenreSearchGetResponse(
  genreSearchGetResponse: Partial<GenreSearchGetResponse> | undefined = {},
): Record<string, (node: ParseNode) => void> {
  return {
    "request": (n) => {
      genreSearchGetResponse.request = n.getObjectValue<
        GenreSearchGetResponse_request
      >(createGenreSearchGetResponse_requestFromDiscriminatorValue);
    },
    "result": (n) => {
      genreSearchGetResponse.result = n.getObjectValue<
        GenreSearchGetResponse_result
      >(createGenreSearchGetResponse_resultFromDiscriminatorValue);
    },
  };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGenreSearchGetResponse_request(
  genreSearchGetResponse_request:
    | Partial<GenreSearchGetResponse_request>
    | undefined = {},
): Record<string, (node: ParseNode) => void> {
  return {
    "parameters": (n) => {
      genreSearchGetResponse_request.parameters = n.getObjectValue<
        GenreSearchGetResponse_request_parameters
      >(createGenreSearchGetResponse_request_parametersFromDiscriminatorValue);
    },
  };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGenreSearchGetResponse_request_parameters(
  genreSearchGetResponse_request_parameters:
    | Partial<GenreSearchGetResponse_request_parameters>
    | undefined = {},
): Record<string, (node: ParseNode) => void> {
  return {
    "affiliate_id": (n) => {
      genreSearchGetResponse_request_parameters.affiliate_id = n
        .getStringValue();
    },
    "api_id": (n) => {
      genreSearchGetResponse_request_parameters.api_id = n.getStringValue();
    },
    "floor_id": (n) => {
      genreSearchGetResponse_request_parameters.floor_id = n.getStringValue();
    },
    "hits": (n) => {
      genreSearchGetResponse_request_parameters.hits = n.getStringValue();
    },
    "initial": (n) => {
      genreSearchGetResponse_request_parameters.initial = n.getStringValue();
    },
    "offset": (n) => {
      genreSearchGetResponse_request_parameters.offset = n.getStringValue();
    },
    "output": (n) => {
      genreSearchGetResponse_request_parameters.output = n.getStringValue();
    },
  };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGenreSearchGetResponse_result(
  genreSearchGetResponse_result:
    | Partial<GenreSearchGetResponse_result>
    | undefined = {},
): Record<string, (node: ParseNode) => void> {
  return {
    "first_position": (n) => {
      genreSearchGetResponse_result.first_position = n.getNumberValue();
    },
    "floor_code": (n) => {
      genreSearchGetResponse_result.floor_code = n.getStringValue();
    },
    "floor_id": (n) => {
      genreSearchGetResponse_result.floor_id = n.getStringValue();
    },
    "floor_name": (n) => {
      genreSearchGetResponse_result.floor_name = n.getStringValue();
    },
    "genre": (n) => {
      genreSearchGetResponse_result.genre = n.getCollectionOfObjectValues<
        GenreSearchGetResponse_result_genre
      >(createGenreSearchGetResponse_result_genreFromDiscriminatorValue);
    },
    "result_count": (n) => {
      genreSearchGetResponse_result.result_count = n.getNumberValue();
    },
    "service_code": (n) => {
      genreSearchGetResponse_result.service_code = n.getStringValue();
    },
    "service_name": (n) => {
      genreSearchGetResponse_result.service_name = n.getStringValue();
    },
    "site_code": (n) => {
      genreSearchGetResponse_result.site_code = n.getStringValue();
    },
    "site_name": (n) => {
      genreSearchGetResponse_result.site_name = n.getStringValue();
    },
    "status": (n) => {
      genreSearchGetResponse_result.status = n.getStringValue();
    },
    "total_count": (n) => {
      genreSearchGetResponse_result.total_count = n.getStringValue();
    },
  };
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGenreSearchGetResponse_result_genre(
  genreSearchGetResponse_result_genre:
    | Partial<GenreSearchGetResponse_result_genre>
    | undefined = {},
): Record<string, (node: ParseNode) => void> {
  return {
    "genre_id": (n) => {
      genreSearchGetResponse_result_genre.genre_id = n.getStringValue();
    },
    "list_url": (n) => {
      genreSearchGetResponse_result_genre.list_url = n.getStringValue();
    },
    "name": (n) => {
      genreSearchGetResponse_result_genre.name = n.getStringValue();
    },
    "ruby": (n) => {
      genreSearchGetResponse_result_genre.ruby = n.getStringValue();
    },
  };
}
/**
 * ジャンル一覧
 */
export interface GenreSearchGetResponse extends AdditionalDataHolder, Parsable {
  /**
   * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
   */
  additionalData?: Record<string, unknown>;
  /**
   * The request property
   */
  request?: GenreSearchGetResponse_request | null;
  /**
   * The result property
   */
  result?: GenreSearchGetResponse_result | null;
}
export interface GenreSearchGetResponse_request
  extends AdditionalDataHolder, Parsable {
  /**
   * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
   */
  additionalData?: Record<string, unknown>;
  /**
   * The parameters property
   */
  parameters?: GenreSearchGetResponse_request_parameters | null;
}
export interface GenreSearchGetResponse_request_parameters
  extends AdditionalDataHolder, Parsable {
  /**
   * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
   */
  additionalData?: Record<string, unknown>;
  /**
   * The affiliate_id property
   */
  affiliate_id?: string | null;
  /**
   * The api_id property
   */
  api_id?: string | null;
  /**
   * The floor_id property
   */
  floor_id?: string | null;
  /**
   * The hits property
   */
  hits?: string | null;
  /**
   * The initial property
   */
  initial?: string | null;
  /**
   * The offset property
   */
  offset?: string | null;
  /**
   * The output property
   */
  output?: string | null;
}
export interface GenreSearchGetResponse_result
  extends AdditionalDataHolder, Parsable {
  /**
   * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
   */
  additionalData?: Record<string, unknown>;
  /**
   * The first_position property
   */
  first_position?: number | null;
  /**
   * The floor_code property
   */
  floor_code?: string | null;
  /**
   * The floor_id property
   */
  floor_id?: string | null;
  /**
   * The floor_name property
   */
  floor_name?: string | null;
  /**
   * The genre property
   */
  genre?: GenreSearchGetResponse_result_genre[] | null;
  /**
   * The result_count property
   */
  result_count?: number | null;
  /**
   * The service_code property
   */
  service_code?: string | null;
  /**
   * The service_name property
   */
  service_name?: string | null;
  /**
   * The site_code property
   */
  site_code?: string | null;
  /**
   * The site_name property
   */
  site_name?: string | null;
  /**
   * The status property
   */
  status?: string | null;
  /**
   * The total_count property
   */
  total_count?: string | null;
}
export interface GenreSearchGetResponse_result_genre
  extends AdditionalDataHolder, Parsable {
  /**
   * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
   */
  additionalData?: Record<string, unknown>;
  /**
   * The genre_id property
   */
  genre_id?: string | null;
  /**
   * The list_url property
   */
  list_url?: string | null;
  /**
   * The name property
   */
  name?: string | null;
  /**
   * The ruby property
   */
  ruby?: string | null;
}
/**
 * Builds and executes requests for operations under /GenreSearch
 */
export interface GenreSearchRequestBuilder
  extends BaseRequestBuilder<GenreSearchRequestBuilder> {
  /**
   * ジャンル一覧を取得することが可能なAPIです。```curlhttps://api.dmm.com/affiliate/v3/GenreSearch?api_id=[APIID]&affiliate_id=[アフィリエイトID]&initial=%e3%81%8d&floor_id=25&hits=10&offset=10&output=json```
   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
   * @returns {Promise<GenreSearchGetResponse>}
   */
  get(
    requestConfiguration?:
      | RequestConfiguration<GenreSearchRequestBuilderGetQueryParameters>
      | undefined,
  ): Promise<GenreSearchGetResponse | undefined>;
  /**
   * ジャンル一覧を取得することが可能なAPIです。```curlhttps://api.dmm.com/affiliate/v3/GenreSearch?api_id=[APIID]&affiliate_id=[アフィリエイトID]&initial=%e3%81%8d&floor_id=25&hits=10&offset=10&output=json```
   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
   * @returns {RequestInformation}
   */
  toGetRequestInformation(
    requestConfiguration?:
      | RequestConfiguration<GenreSearchRequestBuilderGetQueryParameters>
      | undefined,
  ): RequestInformation;
}
/**
 * ジャンル一覧を取得することが可能なAPIです。```curlhttps://api.dmm.com/affiliate/v3/GenreSearch?api_id=[APIID]&affiliate_id=[アフィリエイトID]&initial=%e3%81%8d&floor_id=25&hits=10&offset=10&output=json```
 */
export interface GenreSearchRequestBuilderGetQueryParameters {
  /**
   * 出力形式jsonで指定した場合に、このパラメータでコールバック関数名を指定すると、JSONP形式で出力されます
   */
  callback?: string;
  /**
   * フロア検索APIから取得可能なフロアID
   */
  floorId?: string;
  /**
   * 取得件数初期値：100　最大：500
   */
  hits?: number;
  /**
   * 頭文字(50音) 50音をUTF-8で指定
   */
  initial?: string;
  /**
   * 検索開始位置初期値：1
   */
  offset?: number;
  /**
   * 出力形式
   */
  output?: GetOutputQueryParameterType;
}
export type GetOutputQueryParameterType =
  (typeof GetOutputQueryParameterTypeObject)[
    keyof typeof GetOutputQueryParameterTypeObject
  ];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGenreSearchGetResponse(
  writer: SerializationWriter,
  genreSearchGetResponse: Partial<GenreSearchGetResponse> | undefined | null =
    {},
): void {
  if (genreSearchGetResponse) {
    writer.writeObjectValue<GenreSearchGetResponse_request>(
      "request",
      genreSearchGetResponse.request,
      serializeGenreSearchGetResponse_request,
    );
    writer.writeObjectValue<GenreSearchGetResponse_result>(
      "result",
      genreSearchGetResponse.result,
      serializeGenreSearchGetResponse_result,
    );
    writer.writeAdditionalData(genreSearchGetResponse.additionalData);
  }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGenreSearchGetResponse_request(
  writer: SerializationWriter,
  genreSearchGetResponse_request:
    | Partial<GenreSearchGetResponse_request>
    | undefined
    | null = {},
): void {
  if (genreSearchGetResponse_request) {
    writer.writeObjectValue<GenreSearchGetResponse_request_parameters>(
      "parameters",
      genreSearchGetResponse_request.parameters,
      serializeGenreSearchGetResponse_request_parameters,
    );
    writer.writeAdditionalData(genreSearchGetResponse_request.additionalData);
  }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGenreSearchGetResponse_request_parameters(
  writer: SerializationWriter,
  genreSearchGetResponse_request_parameters:
    | Partial<GenreSearchGetResponse_request_parameters>
    | undefined
    | null = {},
): void {
  if (genreSearchGetResponse_request_parameters) {
    writer.writeStringValue(
      "affiliate_id",
      genreSearchGetResponse_request_parameters.affiliate_id,
    );
    writer.writeStringValue(
      "api_id",
      genreSearchGetResponse_request_parameters.api_id,
    );
    writer.writeStringValue(
      "floor_id",
      genreSearchGetResponse_request_parameters.floor_id,
    );
    writer.writeStringValue(
      "hits",
      genreSearchGetResponse_request_parameters.hits,
    );
    writer.writeStringValue(
      "initial",
      genreSearchGetResponse_request_parameters.initial,
    );
    writer.writeStringValue(
      "offset",
      genreSearchGetResponse_request_parameters.offset,
    );
    writer.writeStringValue(
      "output",
      genreSearchGetResponse_request_parameters.output,
    );
    writer.writeAdditionalData(
      genreSearchGetResponse_request_parameters.additionalData,
    );
  }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGenreSearchGetResponse_result(
  writer: SerializationWriter,
  genreSearchGetResponse_result:
    | Partial<GenreSearchGetResponse_result>
    | undefined
    | null = {},
): void {
  if (genreSearchGetResponse_result) {
    writer.writeNumberValue(
      "first_position",
      genreSearchGetResponse_result.first_position,
    );
    writer.writeStringValue(
      "floor_code",
      genreSearchGetResponse_result.floor_code,
    );
    writer.writeStringValue("floor_id", genreSearchGetResponse_result.floor_id);
    writer.writeStringValue(
      "floor_name",
      genreSearchGetResponse_result.floor_name,
    );
    writer.writeCollectionOfObjectValues<GenreSearchGetResponse_result_genre>(
      "genre",
      genreSearchGetResponse_result.genre,
      serializeGenreSearchGetResponse_result_genre,
    );
    writer.writeNumberValue(
      "result_count",
      genreSearchGetResponse_result.result_count,
    );
    writer.writeStringValue(
      "service_code",
      genreSearchGetResponse_result.service_code,
    );
    writer.writeStringValue(
      "service_name",
      genreSearchGetResponse_result.service_name,
    );
    writer.writeStringValue(
      "site_code",
      genreSearchGetResponse_result.site_code,
    );
    writer.writeStringValue(
      "site_name",
      genreSearchGetResponse_result.site_name,
    );
    writer.writeStringValue("status", genreSearchGetResponse_result.status);
    writer.writeStringValue(
      "total_count",
      genreSearchGetResponse_result.total_count,
    );
    writer.writeAdditionalData(genreSearchGetResponse_result.additionalData);
  }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGenreSearchGetResponse_result_genre(
  writer: SerializationWriter,
  genreSearchGetResponse_result_genre:
    | Partial<GenreSearchGetResponse_result_genre>
    | undefined
    | null = {},
): void {
  if (genreSearchGetResponse_result_genre) {
    writer.writeStringValue(
      "genre_id",
      genreSearchGetResponse_result_genre.genre_id,
    );
    writer.writeStringValue(
      "list_url",
      genreSearchGetResponse_result_genre.list_url,
    );
    writer.writeStringValue("name", genreSearchGetResponse_result_genre.name);
    writer.writeStringValue("ruby", genreSearchGetResponse_result_genre.ruby);
    writer.writeAdditionalData(
      genreSearchGetResponse_result_genre.additionalData,
    );
  }
}
/**
 * Uri template for the request builder.
 */
export const GenreSearchRequestBuilderUriTemplate =
  "{+baseurl}/GenreSearch?floor_id={floor_id}{&callback*,hits*,initial*,offset*,output*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GenreSearchRequestBuilderGetQueryParametersMapper: Record<
  string,
  string
> = {
  "floorId": "floor_id",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GenreSearchRequestBuilderRequestsMetadata: RequestsMetadata = {
  get: {
    uriTemplate: GenreSearchRequestBuilderUriTemplate,
    responseBodyContentType: "application/json",
    adapterMethodName: "send",
    responseBodyFactory: createGenreSearchGetResponseFromDiscriminatorValue,
    queryParametersMapper: GenreSearchRequestBuilderGetQueryParametersMapper,
  },
};
export const GetOutputQueryParameterTypeObject = {
  Json: "json",
  Xml: "xml",
} as const;
/* tslint:enable */
/* eslint-enable */
